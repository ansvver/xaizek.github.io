<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description></description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
		
			<item>
				<title>Clang by example: Detecting postfix operators in for loops</title>
				<description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h2&gt;Foreword&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Llvm&quot;&gt;LLVM&lt;/a&gt; project has been started back in 2000, but became widely
known and used quite recently, about 4 years as of now (2014).  It&amp;#39;s used by
hardware manufactures to implement programming languages for their products as
well as by software engineering companies to develop their own programs.  There
are two main reasons why LLVM gained such popularity:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extensible compiler infrastructure built from scratch in C++.&lt;/li&gt;
&lt;li&gt;License that allows for proprietary usage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;#39;re not here to debate whether second reason is good or bad, but the first
one is definitely a good one.  It&amp;#39;s the first reason which &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Compiler_Collection&quot;&gt;GCC&lt;/a&gt; is
missing and which is hard to get after tenth years of development.
Architecture of LLVM is unique among existing compilers and is its most
significant advantage.&lt;/p&gt;

&lt;p&gt;Probably the most well known component (tool) of LLVM is &lt;a href=&quot;https://en.wikipedia.org/wiki/Clang&quot;&gt;Clang&lt;/a&gt;,
which provides not only compiles languages of C-family, but also exposes its
internal data structures for dealing with program being compiled and provides
various means to deal with them.  Later Clang has been updated with specialized
facilities to process source files and even to modify them.&lt;/p&gt;

&lt;p&gt;As it&amp;#39;s now, Clang can be used to implement tools for processing code written
in C/C++/Objective-C/Objective-C++ relatively easily.  With it anyone can
write tools for code processing with quite little amount of
effort.  The hard part is to start writing such tools as it&amp;#39;s easy to get lost
in lots of headers and libraries supplied with LLVM and Clang.  Hence the main
idea behind these series of articles: give one enough knowledge to be able to
use Clang for writing tools.  To achieve the goal, we&amp;#39;ll look at examples of
building Clang-tools from scratch.  There will also be referenced materials
that are recommended to read/watch/consult as using Clang and LLVM is already
documented in many sources.  Although there are plenty of resources on Clang,
most of them have two issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there are more or less out of date (because of quite high pace of development
and breaking changes from time to time);&lt;/li&gt;
&lt;li&gt;some of covered examples are too artificial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s why we&amp;#39;re going to build a small set of tools some of which might not be
self contained, but nevertheless should be usable in real life.  Process of
building such tools will shed light on different parts of Clang, which will
help construct a better image of what it is and in what ways it can be used.&lt;/p&gt;

&lt;h2&gt;Environment&lt;/h2&gt;

&lt;p&gt;Here are some details of my working environment to help solve possible issues
with initial setup (see below).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GNU/Linux operating system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GCC version 4.8.1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LLVM from 11.03.2014 built with GCC:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;llvm/trunk@203604 (git mirror hash: 819af77aa3a9da84f666dc252815aec9f1cf18f5)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clang from 11.03.2014 built with GCC:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cfe/trunk@203603 (git mirror hash: 640884e00a911d9a599dd8fd5dd26cdd96dfc9ea)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cmake version 2.8.8&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ninja version 1.4.0&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;everything is built with GCC&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Your first tool&lt;/h1&gt;

&lt;p&gt;To get started one needs to have a working build of LLVM and Clang.  This is
not a subject of this writing and there is already a good tutorial on this (read
notes below before following instructions in the tutorial):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/docs/LibASTMatchersTutorial.html&quot;&gt;Tutorial for building tools using LibTooling and LibASTMatchers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems to be a bit out of date, so here are some additional moments to
consider:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Modern versions of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cmake&quot;&gt;cmake&lt;/a&gt; are built with &lt;a href=&quot;http://martine.github.io/ninja/&quot;&gt;ninja&lt;/a&gt;
support, so good chances that there is no need to recompile it, check it by
running:&lt;/p&gt;

&lt;p&gt;cmake | grep Ninja&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I suggest enabling generation of documentation with Doxygen.  For this one
needs to set the following &lt;code&gt;ccmake&lt;/code&gt; options to &lt;code&gt;YES&lt;/code&gt; before starting the
build (see a small hint on using &lt;code&gt;ccmake&lt;/code&gt; below):&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;- `CLANG_INCLUDE_DOCS`
- `LLVM_BUILD_DOCS`
- `LLVM_INCLUDE_DOCS`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way you&amp;#39;ll be sure that you&amp;#39;re referring to the correct version of
   documentation while writing your tools.&lt;/p&gt;

&lt;p&gt;You might want to set &lt;code&gt;LLVM_BUILD_DOCS&lt;/code&gt; to &lt;code&gt;OFF&lt;/code&gt; once everything is built, it
   won&amp;#39;t delete generated documentation, but will reduce time of compilation
   when build is started by &lt;code&gt;ninja&lt;/code&gt; command with no arguments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s said that all tests should pass.  Current version of tests display
messages about &lt;strong&gt;expected&lt;/strong&gt; failed tests, that seems to be OK.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you decide to rebuilt Clang with itself don&amp;#39;t forget to setup
&lt;code&gt;CMAKE_CXX_COMPILER&lt;/code&gt; as well as &lt;code&gt;CMAKE_C_COMPILER&lt;/code&gt; (use full path to &lt;code&gt;clang&lt;/code&gt;
executable for it).  Actually recompiling with Clang is optional, no need to
waste time on that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In step 1 there is a command:&lt;/p&gt;

&lt;p&gt;cat &amp;quot;int main() { return 0; }&amp;quot; &amp;gt; test.cpp&lt;/p&gt;

&lt;p&gt;Which should be:&lt;/p&gt;

&lt;p&gt;echo &amp;quot;int main() { return 0; }&amp;quot; &amp;gt; test.cpp&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; hint: use arrow keys to navigate in terminal interface, &lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt;
doesn&amp;#39;t work there, but searching with &lt;code&gt;/&lt;/code&gt; works.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;re done with that tutorial, you should feel like knowing a lot of new
stuff about it, still not being 100% sure that you able to write your own tool.
It&amp;#39;s advised to watch &lt;a href=&quot;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&quot;&gt;Introduction to the Clang AST&lt;/a&gt; now.  Actually
the order can be reversed (watch the video first), but as Manuel Klimek (the
guy in the video) describes more advanced topics, it makes sense to do basic
tutorial first.&lt;/p&gt;

&lt;p&gt;Now, having some background, we can start creating our small, but useful tool.&lt;/p&gt;

&lt;h1&gt;Detecting postfix operators in for loops&lt;/h1&gt;

&lt;p&gt;Our goal is to analyse source files to find postfix increment and decrement
operators in the last part of for-loop statements.  The drawback of using
postfix operator is that it can lead to performance penalty in some cases.  As
you probably know, postfix operator differs from prefix one in creating one
extra object, which normally is not optimized.  It&amp;#39;s almost free for primitive
types and can be free when it goes about iterators from library provided along
with a compiler, but &lt;em&gt;in general&lt;/em&gt; it&amp;#39;s a good practice to use postfix
increment/decrement operators only when you have a reason to do so.&lt;/p&gt;

&lt;p&gt;There is already a plenty of tools that can detect misuse of postfix operators,
but such warnings can get lost in output of mature static analyzers and be just
skipped by a developer.  This tool we&amp;#39;ll do just that so skipping such warnings
would be a stupid thing to do.  This is just a good programming style to use
postfix operators, so lets write a tool that ensures correctness of for-loops
and learn more about Clang&amp;#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; at the same time.&lt;/p&gt;

&lt;p&gt;By the way, we&amp;#39;ll name the tool &amp;quot;for-postfix&amp;quot; (not to be confused with &lt;a href=&quot;https://en.wikipedia.org/wiki/Postfix_(software)&quot;&gt;mail
transfer agent&lt;/a&gt;).  See &amp;quot;Additional resources&amp;quot; section below for
a link to repository containing ready to use tool.  History of commits is quite
clear, so one can examine commits one by one while reading the article.&lt;/p&gt;

&lt;h2&gt;Boilerplate&lt;/h2&gt;

&lt;p&gt;Note, I go in detail in this section just to repeat what you have learnt from
the tutorial, skip this part if you feel like you don&amp;#39;t need to repeat
anything.&lt;/p&gt;

&lt;p&gt;Just as in &amp;quot;Tutorial for building tools using LibTooling and LibASTMatchers&amp;quot;
referenced above, we&amp;#39;re going to use &lt;a href=&quot;http://clang.llvm.org/docs/LibTooling.html&quot;&gt;LibTooling&lt;/a&gt; and
&lt;a href=&quot;http://clang.llvm.org/doxygen/ASTMatchers_8h_source.html&quot;&gt;ASTMatchers&lt;/a&gt;.  There is also
&lt;a href=&quot;http://clang.llvm.org/doxygen/classclang_1_1RecursiveASTVisitor.html&quot;&gt;RecursiveASTVisitor&lt;/a&gt;, but it&amp;#39;s now superseded by
ASTMatchers.&lt;/p&gt;

&lt;p&gt;To get started go to &lt;code&gt;llvm/tools/clang/tools/extra/&lt;/code&gt; directory and
create a subdirectory called &lt;code&gt;for-postfix&lt;/code&gt;.  Navigate to new directory and
create &lt;code&gt;CMakeLists.txt&lt;/code&gt; containing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cmake language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LLVM_LINK_COMPONENTS&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LLVM_USED_LIBS&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clangTooling&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clangBasic&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clangAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;add_clang_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for-postfix&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;for-postfix.cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for-postfix&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clangTooling&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clangBasic&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clangASTMatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another file that needs to be created is &lt;code&gt;for-postfix.cpp&lt;/code&gt;.  For now let&amp;#39;s put a
dummy code there:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;add_subdirectory(for-postfix)&lt;/code&gt; line at the end of the
&lt;code&gt;llvm/tools/clang/tools/extra/CMakeLists.txt&lt;/code&gt;, so that our tool is built with
LLVM/Clang.&lt;/p&gt;

&lt;p&gt;Now I suggest you to go into your &lt;code&gt;build/&lt;/code&gt; directory and run &lt;code&gt;ninja
for-postfix&lt;/code&gt; just to make sure the configuration is correct.  If it is, you&amp;#39;ll
find an executable &lt;code&gt;build/bin/for-postfix&lt;/code&gt; that does nothing when it&amp;#39;s run.&lt;/p&gt;

&lt;p&gt;Now lets write a skeleton of the tool (I give this as it is because you should
already know basics of this kind of stuff):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;llvm/Support/CommandLine.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;clang/ASTMatchers/ASTMatchFinder.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;clang/Tooling/CommonOptionsParser.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;clang/Tooling/Tooling.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast_matchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tooling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptionCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toolCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;for-postfix options&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extrahelp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonHelp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommonOptionsParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelpMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CommonOptionsParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionsParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toolCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ClangTool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optionsParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCompilations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;optionsParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSourcePathList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;MatchFinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newFrontendActionFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should compile and link fine.  By the way, notice unusual &lt;code&gt;const&lt;/code&gt; in front
of &lt;code&gt;argv&lt;/code&gt; parameter declaration, this is needed to satisfy prototype of
&lt;a href=&quot;http://clang.llvm.org/doxygen/classclang_1_1tooling_1_1CommonOptionsParser.html#afb426d699eb71d90163bd2f61e29f78b&quot;&gt;CommonOptionsParser constructor&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Matching builtin types&lt;/h2&gt;

&lt;p&gt;Finally we&amp;#39;re ready to start matching things we&amp;#39;re interested in.  Our first
matcher will match increment operators, both prefix and postfix:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatementMatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incMatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forStmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;// for ([init]; [condition]; [increment])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hasIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// &amp;quot;increment&amp;quot; part of for-loop&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;unaryOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// any unary op, e.g. *, &amp;amp;, --&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasOperatorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;++&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// exact unary op: ++&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// bind matched unary op to &amp;quot;op&amp;quot; name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above piece of code should be self-explaining, but notice where &lt;code&gt;bind&lt;/code&gt; method
is called.  It can be called on objects that correspond to real AST nodes, like
for-statements (result of &lt;code&gt;forStmt&lt;/code&gt;) and
operators (result of calling &lt;code&gt;unaryOperator&lt;/code&gt;), but can&amp;#39;t be called on something
that just examines properties of AST nodes (like &lt;code&gt;hasIncrement&lt;/code&gt; or
&lt;code&gt;hasOperatorName&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To proceed further we need one more entity, &lt;code&gt;MatchFinder&lt;/code&gt;&amp;#39;s callback handler:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MatchHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatchFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MatchCallback&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatchFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MatchResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNodeAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also don&amp;#39;t forget to include &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; before compiling.&lt;/p&gt;

&lt;p&gt;You should be familiar with the idea behind this code: it tries to extract
unary operator node named &lt;code&gt;op&lt;/code&gt; and dumps it on the screen when succeed.&lt;/p&gt;

&lt;p&gt;Lets create our helper and use it to add our matcher in the &lt;code&gt;main&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;MatchHelper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point running our tool over this example file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do nothing on purpose&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Should output both &lt;code&gt;i++&lt;/code&gt; and &lt;code&gt;++i&lt;/code&gt; like this (ignore addresses):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;UnaryOperator 0x2727ed0 &amp;#39;int&amp;#39; postfix &amp;#39;++&amp;#39;
`-DeclRefExpr 0x2727ea8 &amp;#39;int&amp;#39; lvalue Var 0x2727d90 &amp;#39;i&amp;#39; &amp;#39;int&amp;#39;

UnaryOperator 0x2728160 &amp;#39;int&amp;#39; lvalue prefix &amp;#39;++&amp;#39;
`-DeclRefExpr 0x2728138 &amp;#39;int&amp;#39; lvalue Var 0x2728020 &amp;#39;i&amp;#39; &amp;#39;int&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets filter out the second match in our helper.  Just surround dumping code
with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPostfix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// print nodes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we have now is not capable of handling decrement operator.  To fix that,
simplify the matcher to remove operator name check (note name change):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatementMatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builtinMatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forStmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;// for ([init]; [condition]; [increment])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hasIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// &amp;quot;increment&amp;quot; part of for-loop&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;unaryOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// any unary op, e.g. *, &amp;amp;, --&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// bind matched unary op to &amp;quot;op&amp;quot; name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that there was one condition, which is now removed, while actually one
can use many conditions separated by commas.  We&amp;#39;re not removing the check
completely, just moving it to the &lt;code&gt;MatchHelper&lt;/code&gt;, where &lt;code&gt;op-&amp;gt;isPostfix()&lt;/code&gt;
condition needs to be replaced with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isIncrementDecrementOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPostfix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// print nodes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it for builtin operators.&lt;/p&gt;

&lt;h2&gt;Matching overloaded operators&lt;/h2&gt;

&lt;p&gt;This example uses postfix increment operator, but our &lt;code&gt;for-postfix&lt;/code&gt; is not able
to find it yet:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do nothing on purpose&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our matcher could look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatementMatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incMatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forStmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// for ([init]; [condition]; [increment])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hasIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// &amp;quot;increment&amp;quot; part of for-loop&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;operatorCallExpr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// call of overloaded operator&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasOverloadedOperatorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;++&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// named &amp;quot;++&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;argumentCountIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// that requires two arguments&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// bind matched unary op to &amp;quot;op&amp;quot; name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is too specific and requires its clone to match decrement operator
(couldn&amp;#39;t find a way to implement match chooser, something like OR operator).
It also has two interesting properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operatorCallExpr&lt;/code&gt; got two conditions that are &lt;code&gt;AND&lt;/code&gt;ed with each other;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argumentCountIs&lt;/code&gt; is used to match postfix operator, here first argument is
&lt;code&gt;this&lt;/code&gt; and the second one is useless &lt;code&gt;int&lt;/code&gt; to make overloading of postfix
operators possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets throw away matching of operator name and do this in &lt;code&gt;MatchHelper&lt;/code&gt; later:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatementMatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opMatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forStmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// for ([init]; [condition]; [increment])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hasIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// &amp;quot;increment&amp;quot; part of for-loop&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;operatorCallExpr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// call of overloaded operator&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;argumentCountIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// that requires two arguments&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// bind matched unary op to &amp;quot;op&amp;quot; name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to update &lt;code&gt;MatchHelper&lt;/code&gt; a bit to handle overloaded operators, which
it won&amp;#39;t match now as &lt;code&gt;CallExpr&lt;/code&gt; doesn&amp;#39;t subclass &lt;code&gt;UnaryOperator&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CXXOperatorCallExpr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNodeAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverloadedOperatorKind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OO_PlusPlus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OO_MinusMinus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;printOut&lt;/code&gt; contains two lines from above that dump operator nodes.  As
you can see matching specific operators is quite easy.  The crucial part in
this case is to use right type of node.  Regular &lt;code&gt;CallExpr&lt;/code&gt; won&amp;#39;t let us to
check for operator type, &lt;code&gt;CXXOperatorCallExpr&lt;/code&gt; is needed instead.&lt;/p&gt;

&lt;p&gt;Now lets register new matcher in &lt;code&gt;MatchFinder&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that by adding multiple matchers to match finder one can match different
things in one traverse through AST.&lt;/p&gt;

&lt;h2&gt;Formatting output&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re almost done.  Current way of printing out nodes is not readable, it would
be better to print path to source file with match and number of line.  First of
all we need to include more headers and add one more using directive:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;clang/Basic/SourceLocation.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;clang/Basic/SourceManager.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then update &lt;code&gt;printOut&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;FullSourceLoc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fullLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLocStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFilename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSpellingLineNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineNum&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dangerous use of postfix operator&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet outputs match in the following format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xaizek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tst4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dangerous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xaizek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llvm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tst4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dangerous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s alike output of Unix grep command (with -F and -n switches) and can be accepted by many other tools
out there, e.g. on can store output of the tool to a file and open it in Vim to
navigate through errors and edit them like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tool can already be used in real projects to find misuse of postfix
operators.&lt;/p&gt;

&lt;h1&gt;Additional resources (not referenced above)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/the-design-of-llvm/240001128&quot;&gt;The Design of LLVM&lt;/a&gt; by Chris Lattner, the primary author of
the LLVM and related projects, such as the Clang compiler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/loarabia/Clang-tutorial&quot;&gt;Collection of Clang tutorials&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xaizek/for-postfix&quot;&gt;GitHub repository of for-postfix tool&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://habrahabr.ru/post/148508/&quot;&gt;Clang API. Basics (in Russian)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 02 May 2014 00:00:00 +0300</pubDate>
				<link>/2014-05-02/detecting-postfix-operators-in-for-loops</link>
				<guid isPermaLink="true">/2014-05-02/detecting-postfix-operators-in-for-loops</guid>
			</item>
		
			<item>
				<title>Fix constant rebuilding of static libraries by GNU make</title>
				<description>&lt;h3&gt;The issue explained&lt;/h3&gt;

&lt;p&gt;Say directory structure is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ tree
.
|-- Makefile
`-- lib.cpp

0 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;lib.cpp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;libfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;make language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nf&quot;&gt;lib.a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;lib.o Makefile&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;AR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; rcuvs &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The issue:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ make
g++    -c -o lib.o lib.cpp
ar rcuvs lib.a lib.o
a - lib.o
$ make
make: `lib.a&amp;#39; is up to date.
$ touch Makefile
$ make
ar rcuvs lib.a lib.o
$ make
ar rcuvs lib.a lib.o
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So there is a flaw in how &lt;code&gt;ar&lt;/code&gt; tool operates on replacing archive members
when used with &lt;code&gt;make&lt;/code&gt;: if output file already exists, but none of input
files is newer than corresponding file in the archive, modification
date of the archive remains the same.  As a result, make file rule is always
triggered.&lt;/p&gt;

&lt;p&gt;It happens only when &lt;code&gt;ar&lt;/code&gt; is told to update object files.  Which is done in
this case using &lt;code&gt;r&lt;/code&gt; switch and &lt;code&gt;u&lt;/code&gt; modifier.  From &lt;code&gt;man ar&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;r   Insert the files member... into archive (with replacement).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;u   Normally, ar r... inserts all files listed into the archive.  If you
    would like to insert only those of the files you list that are newer than
    existing members of the same names, use this modifier.  The u modifier is
    allowed only for the operation r (replace).  In particular, the combination
    qu is not allowed, since checking the timestamps would lose any speed
    advantage from the operation q.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The solution (or workaround)&lt;/h3&gt;

&lt;p&gt;Add &lt;code&gt;touch library.a&lt;/code&gt; after calling &lt;code&gt;ar&lt;/code&gt;.  Updated &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;make language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nf&quot;&gt;lib.a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;lib.o Makefile&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;AR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; rcuvs &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;
    touch &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now output is as expected:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ make
ar rcuvs lib.a lib.o
touch lib.a
$ make
make: `lib.a&amp;#39; is up to date.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Wed, 05 Feb 2014 00:00:00 +0200</pubDate>
				<link>/2014-02-05/fix-constant-rebuilding-of-static-libraries-in-make</link>
				<guid isPermaLink="true">/2014-02-05/fix-constant-rebuilding-of-static-libraries-in-make</guid>
			</item>
		
			<item>
				<title>How to profile python application packaged via py2exe</title>
				<description>&lt;h3&gt;Simple profiling using standard &lt;code&gt;cProfile&lt;/code&gt; module&lt;/h3&gt;

&lt;p&gt;Usually a command similar to the one below is used to profile an application:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;python -m cProfile -o app.prof app.py arg1 arg2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The issue with packaged application&lt;/h3&gt;

&lt;p&gt;One can&amp;#39;t simply do this when python sources are packaged in some kind of
binary container like &lt;a href=&quot;py2exe&quot;&gt;py2exe&lt;/a&gt;, because in this case application is
interpreted by a builtin interpreter and it&amp;#39;s not as easy to run profiler.&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p&gt;Just run profiler in code.  Given something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# all other actions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# main actions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Turn it into:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# all other actions&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# main actions&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cPythoh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;main()&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;path/to/app.prof&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s not that hard to get how to do this, but as I usually don&amp;#39;t profile code
written in python, it took some time to get this done.&lt;/p&gt;
</description>
				<pubDate>Tue, 04 Feb 2014 00:00:00 +0200</pubDate>
				<link>/2014-02-04/how-to-profile-packaged-python-app</link>
				<guid isPermaLink="true">/2014-02-04/how-to-profile-packaged-python-app</guid>
			</item>
		
			<item>
				<title>How to recompile source file on each build using make</title>
				<description>&lt;h3&gt;Motivation&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s sometimes useful to see precise date and time an application was compiled.
So such information should be embedded into application at compile time and
displayed on user&amp;#39;s request.&lt;/p&gt;

&lt;h3&gt;Initial solution&lt;/h3&gt;

&lt;p&gt;Usage of such timestamps is quite straightforward.  There are two standard
macros that are generally used for this, namely &lt;code&gt;__DATE__&lt;/code&gt; and &lt;code&gt;__TIME__&lt;/code&gt; (see
&lt;a href=&quot;standard-predefined-macros&quot;&gt;Standard Predefined Macros&lt;/a&gt;).  As first try I just
wrote the following piece of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Compiled at: &amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__DATE__&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__TIME__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It displayed message of this form:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Compiled at: Jan 18 2014 14:07:23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The issue is that when the file with this code (&lt;code&gt;version.c&lt;/code&gt;) is not compiled
output of an application never changes (quite obvious...).  So that simple code
isn&amp;#39;t enough and build process should satisfy a couple of requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;version.c&lt;/code&gt; should be recompiled if any other file is compiled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version.c&lt;/code&gt; should be recompiled if application is relinked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version.c&lt;/code&gt; should &lt;strong&gt;not&lt;/strong&gt; be recompiled if application is not relinked.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working solution&lt;/h3&gt;

&lt;p&gt;Adding various fake targets into &lt;code&gt;Makefile.am&lt;/code&gt; didn&amp;#39;t work out great.  Search
on the Web didn&amp;#39;t get much good results, but eventually &lt;a href=&quot;https://www.mail-archive.com/help-gnu-utils@gnu.org/msg01292.html&quot;&gt;this post&lt;/a&gt;
on one of mailing lists helped to do the thing correctly.  Here&amp;#39;s a quote from
it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;One way which should work with any make is to have the object in
question depend on all source files even though the action only refers to
one of them.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a &lt;code&gt;Makefile.am&lt;/code&gt; it looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;make language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nf&quot;&gt;version.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;$(filter-out version.o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt; $(app_OBJECTS))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note filtering out &lt;code&gt;version.o&lt;/code&gt; from its list of dependencies to avoid creating
of circular dependency, in which case &lt;code&gt;make&lt;/code&gt; prints warning about dropped
circular dependency.&lt;/p&gt;

&lt;p&gt;And here is how it satisfies requirements outlined above.  The first
requirement holds as recompilation of any of object files will update
modification date of appropriate &lt;code&gt;.o&lt;/code&gt;-file, thus triggering &lt;code&gt;version.o&lt;/code&gt;
compilation rule.&lt;/p&gt;

&lt;p&gt;The second requirement also holds simply because list of dependencies for the
link target is almost the same as for &lt;code&gt;version.o&lt;/code&gt; target (it additionally
includes &lt;code&gt;version.o&lt;/code&gt;).  Thanks to topological sorting make will recompile
&lt;code&gt;version.o&lt;/code&gt; before linking the application, which is what we need.&lt;/p&gt;

&lt;p&gt;Finally, the third requirement works for the same reason as the second one.
When all files (including output executable) are up to date, none of
&lt;code&gt;version.o&lt;/code&gt; prerequisites is newer it, hence &lt;code&gt;version.o&lt;/code&gt; not recompiled, no
need to relink anything.&lt;/p&gt;
</description>
				<pubDate>Sat, 18 Jan 2014 00:00:00 +0200</pubDate>
				<link>/2014-01-18/recompile-file-with-any-other-using-make</link>
				<guid isPermaLink="true">/2014-01-18/recompile-file-with-any-other-using-make</guid>
			</item>
		
			<item>
				<title>How to disable subtitles in mplayer by default</title>
				<description>&lt;h3&gt;Pre-history&lt;/h3&gt;

&lt;p&gt;I really like &lt;code&gt;mplayer&lt;/code&gt; because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is very powerful;&lt;/li&gt;
&lt;li&gt;yet quite easy to use from command-line;&lt;/li&gt;
&lt;li&gt;has sane defaults;&lt;/li&gt;
&lt;li&gt;no GUI which just stands between me and video I want to watch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, so good.  The only thing that bothered me for a while is that subtitles
are enabled by default.&lt;/p&gt;

&lt;p&gt;I download subtitles quite often, but use them rarely, mostly when I don&amp;#39;t get
something.  For such workflow it would be ideal to have subtitles loaded
&lt;em&gt;always&lt;/em&gt;, but displayed only when I need them (on pressing &lt;code&gt;v&lt;/code&gt; key), thus
subtitles should be &lt;em&gt;disabled by default&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Looking for a solution&lt;/h3&gt;

&lt;p&gt;It sounds like an easy task, doesn&amp;#39;t it?  Well, I spend quite a lot of time to
solve it.  Initially I expected to find a simple command line option which does
the trick.  I tried these two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-nosub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Disables any otherwise auto-selected internal subtitles (as e.g. the
Matroska/mkv demuxer supports).  Use -noautosub to disable the loading of
external subtitle files.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-noautosub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Turns off automatic subtitle file loading.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-noautosub&lt;/code&gt; worked fine with external subtitles, but hitting &lt;code&gt;v&lt;/code&gt; didn&amp;#39;t
enable subtitles.  The options don&amp;#39;t suppress &lt;em&gt;displaying&lt;/em&gt; subtitles, they
&lt;em&gt;disable loading&lt;/em&gt; of them, making loading later impossible (one would have to
restart mplayer without specifying them).  Such behaviour obviously doesn&amp;#39;t fit
the desired workflow.&lt;/p&gt;

&lt;p&gt;Reading &lt;code&gt;man mplayer&lt;/code&gt; further lead me to the &lt;code&gt;-input&lt;/code&gt; command.  It wasn&amp;#39;t clear
whether it&amp;#39;s of any help, but the description mentioned some new commands that
are not listed in the manual.  Other &amp;quot;strange&amp;quot; options are &lt;code&gt;-list-options&lt;/code&gt; and
&lt;code&gt;-list-properties&lt;/code&gt;.  The first one gives a list of regular options, but output
of the second one contained something new to me, in particular (&lt;code&gt;mplayer
-list-properties | grep sub&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt; sub                  Integer         -1         No
 sub_source           Integer         -1         2
 sub_vob              Integer         -1         No
 sub_demux            Integer         -1         No
 sub_file             Integer         -1         No
 sub_delay            Float           No         No
 sub_pos              Integer         0          100
 sub_alignment        Integer         0          2
 sub_visibility       Flag            0          1
 sub_forced_only      Flag            0          1
 sub_scale            Float           0          100
 teletext_subpage     Integer         0          64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See it?  &lt;code&gt;sub_visibility&lt;/code&gt;, that&amp;#39;s it!  All that&amp;#39;s left is to set it, that
sounds easy again, but neither &lt;code&gt;mplayer -sub_visibility=0 ...&lt;/code&gt; nor &lt;code&gt;mplayer
-input sub_visibility=0&lt;/code&gt; works.&lt;/p&gt;

&lt;p&gt;What about that &lt;code&gt;-input&lt;/code&gt; command?  &lt;code&gt;mplayer -input cmdlist | grep property&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;osd_show_property_te String [Integer] [Integer]
set_property         String String
get_property         String
step_property        String [Float] [Integer]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, trying &lt;code&gt;mplayer -input &amp;#39;set_property sub_visibility 0&amp;#39;&lt;/code&gt;, and fail again.
Consulting &lt;code&gt;man mplayer&lt;/code&gt; again reveals the following: one has to put the
command to a file and pass it to &lt;code&gt;mplayer -input file=&amp;lt;path/to/file&amp;gt;&lt;/code&gt;.
Finally...&lt;/p&gt;

&lt;h3&gt;The solution&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ echo set_property sub_visibility 0 &amp;gt; ~/.mplayer/init
$ cat ~/.mplayer/init
set_property sub_visibility 0
$ mplayer -input file=$HOME/.mplayer/init video.mkv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Sat, 16 Nov 2013 00:00:00 +0200</pubDate>
				<link>/2013-11-16/mplayer-with-disabled-subtitles-by-default</link>
				<guid isPermaLink="true">/2013-11-16/mplayer-with-disabled-subtitles-by-default</guid>
			</item>
		
			<item>
				<title>How to define `_GNU_SOURCE` correctly with autoconf correctly</title>
				<description>&lt;p&gt;&lt;code&gt;_XOPEN_SOURCE&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;dnl Request some additional extensions.  The macro makes it possible to use
dnl features of Posix that are extensions to C, as well as platform extensions
dnl not defined by Posix.
AC_USE_SYSTEM_EXTENSIONS 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mainly for historical reasons, vifm contained the following pieces of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* I don&amp;#39;t know how portable this is but it is&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                     * needed in Linux for wide char function wcwidth().&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                     */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Curses includes follow. */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Today I finally decided to remove such pieces and put the &lt;code&gt;define&lt;/code&gt; into correct
place -- &lt;code&gt;config.h&lt;/code&gt;.  &lt;code&gt;config.h&lt;/code&gt; is automatically included in all translation
units, thus all existing defines can be removed.&lt;/p&gt;

&lt;p&gt;My first attempt was adding the following line to the &lt;code&gt;configure.in&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;AC_DEFINE([_GNU_SOURCE], [], [Enable GNU extensions.])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turned to do what I want, but looking at results from &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DDG&lt;/a&gt; I
accidentally saw this macro:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;AC_GNU_SOURCE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation on it is available &lt;a href=&quot;http://idlebox.net/2010/apidocs/autoconf-2.65.zip/autoconf_18.html#IDX1690&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://idlebox.net/2010/apidocs/autoconf-2.65.zip/autoconf_5.html#AC_005fUSE_005fSYSTEM_005fEXTENSIONS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;AC_GNU_SOURCE&lt;/code&gt; seems to be a better choice because it&amp;#39;s more universal
solution.  &lt;code&gt;AC_DEFINE&lt;/code&gt; produces:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/config.h.in b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;index 018bc95..61a2a67 100644&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;--- a/config.h.in&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -117,3 +117,6 @@&lt;/span&gt;
 /* Number of bits in a file offset, on hosts where this is settable. */
 #undef _FILE_OFFSET_BITS

&lt;span class=&quot;gi&quot;&gt;+/* Enable GNU extensions. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While &lt;code&gt;AC_GNU_SOURCE&lt;/code&gt; gives:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/config.h.in b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;index 018bc95..d7bed74 100644&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;--- a/config.h.in&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -106,6 +106,23 @@&lt;/span&gt;
 /* -n option is available for cp and mv */
 #undef SUPPORT_NO_CLOBBER

&lt;span class=&quot;gi&quot;&gt;+/* Enable extensions on AIX 3, Interix.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _ALL_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _ALL_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable GNU extensions on systems that have them.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable threading extensions on Solaris.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _POSIX_PTHREAD_SEMANTICS&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _POSIX_PTHREAD_SEMANTICS&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable extensions on HP NonStop.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _TANDEM_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _TANDEM_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable general extensions on Solaris.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef __EXTENSIONS__&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef __EXTENSIONS__&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
 /* Version number of package */
 #undef VERSION

&lt;span class=&quot;gu&quot;&gt;@@ -123,5 +145,18 @@&lt;/span&gt;
 /* Define for large files, on AIX-style hosts. */
 #undef _LARGE_FILES

&lt;span class=&quot;gi&quot;&gt;+/* Define to 1 if on MINIX. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _MINIX&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Define to 2 if the system does not provide POSIX.1 features except with&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+   this defined. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _POSIX_1_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Define to 1 if you need to in order for `stat&amp;#39; and other things to work. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _POSIX_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Wed, 16 Oct 2013 00:00:00 +0300</pubDate>
				<link>/2013-10-16/autoconf-how-to-define-gnu-source-correctly</link>
				<guid isPermaLink="true">/2013-10-16/autoconf-how-to-define-gnu-source-correctly</guid>
			</item>
		
			<item>
				<title>Fix tmux hang in X</title>
				<description>&lt;p&gt;Recently I needed to use tmux.  Turned out that it wasn&amp;#39;t even installed on my
system, which, of course, wasn&amp;#39;t a problem.  After it was installed and ran I
was presented with a prompt that didn&amp;#39;t responed to anything.  The only thing
that worked well was &lt;code&gt;pkill tmux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Four hours of tries showed that tmux seems to work in general, but it waits
eternally for something inside &lt;code&gt;select()&lt;/code&gt; system call.  The strangest part of
all this was that it worked just fine in native linux console and through SSH.
As a workaround just to be able to use it I did this ugly thing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Started &lt;code&gt;sshd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Connected to localhost from &lt;code&gt;xterm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ran and used tmux.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then I noticed another strange thing, bash prompt was of regular grey color.
Trying to use other of my customizations (aliases, functions etc.) didn&amp;#39;t
succeed either.  I found it!  My &lt;code&gt;.bashrc&lt;/code&gt; broke tmux.  Bisection through
commenting parts of the &lt;code&gt;.bashrc&lt;/code&gt; revealed this piece of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# check cursor position and add new line if we&amp;#39;re not in the first column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;prompt-command&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OLDSTTY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;stty -g&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    stty raw -echo min 0
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -en &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033[6n&amp;quot;&lt;/span&gt; &amp;gt; /dev/tty &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -sdR CURPOS
    stty &lt;span class=&quot;nv&quot;&gt;$OLDSTTY&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CURPOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -gt 1 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${color_error}↵${color_error_off}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;prompt-command&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do you see what is wrong with it?  (By the way, it&amp;#39;s based on
&lt;a href=&quot;http://stackoverflow.com/a/2575525/1164595&quot;&gt;this StackOverflow answer&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;No?  Here it is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;stdin&lt;/code&gt; of the shell is changed, but never restored.  And tmux seems to be
unable to handle such redirection (&lt;code&gt;GNU screen&lt;/code&gt; works well with it).  Now when
the reason is known, I can reproduce the issue on demand with this command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I see two possible ways to solve the issue:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run body of the function in another process (sub-shell fits well in this
case).&lt;/li&gt;
&lt;li&gt;Save and restore old value of &lt;code&gt;stdin&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first solution could look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# check cursor position and add new line if we&amp;#39;re not in the first column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;prompt-command&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty
        &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OLDSTTY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;stty -g&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
        stty raw -echo min 0
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -en &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033[6n&amp;quot;&lt;/span&gt; &amp;gt; /dev/tty &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -sdR CURPOS
        stty &lt;span class=&quot;nv&quot;&gt;$OLDSTTY&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CURPOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -gt 1 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${color_error}↵${color_error_off}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;prompt-command&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the second one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# check cursor position and add new line if we&amp;#39;re not in the first column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;prompt-command&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;100&amp;lt;&amp;amp;0
    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt; /dev/tty

    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OLDSTTY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;stty -g&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    stty raw -echo min 0
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -en &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033[6n&amp;quot;&lt;/span&gt; &amp;gt; /dev/tty &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -sdR CURPOS
    stty &lt;span class=&quot;nv&quot;&gt;$OLDSTTY&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CURPOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -gt 1 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${color_error}↵${color_error_off}&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# restore real stdout and close duplicate&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;0&amp;lt;&amp;amp;100 100&amp;lt;&amp;amp;-
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;prompt-command&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I chose to use the second variant even though it requires assumption that file
descriptor number 100 is unused.  This should generally be faster than forking
a process.&lt;/p&gt;
</description>
				<pubDate>Wed, 25 Sep 2013 00:00:00 +0300</pubDate>
				<link>/2013-09-25/fix-misterious-tmux-hang-in-x</link>
				<guid isPermaLink="true">/2013-09-25/fix-misterious-tmux-hang-in-x</guid>
			</item>
		
			<item>
				<title>How to define `_GNU_SOURCE` correctly with autoconf</title>
				<description>&lt;p&gt;Mainly for historical reasons, vifm contained the following pieces of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* I don&amp;#39;t know how portable this is but it is&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                     * needed in Linux for wide char function wcwidth().&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                     */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Curses includes follow. */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Today I finally decided to remove such pieces and put the &lt;code&gt;define&lt;/code&gt; into correct
place -- &lt;code&gt;config.h&lt;/code&gt;.  &lt;code&gt;config.h&lt;/code&gt; is automatically included in all translation
units, thus all existing defines can be removed.&lt;/p&gt;

&lt;p&gt;My first attempt was adding the following line to the &lt;code&gt;configure.in&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;AC_DEFINE([_GNU_SOURCE], [], [Enable GNU extensions.])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turned to do what I want, but looking at results from &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DDG&lt;/a&gt; I
accidentally saw this macro:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;AC_GNU_SOURCE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation on it is available &lt;a href=&quot;http://idlebox.net/2010/apidocs/autoconf-2.65.zip/autoconf_18.html#IDX1690&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://idlebox.net/2010/apidocs/autoconf-2.65.zip/autoconf_5.html#AC_005fUSE_005fSYSTEM_005fEXTENSIONS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;AC_GNU_SOURCE&lt;/code&gt; seems to be a better choice because it&amp;#39;s more universal
solution.  &lt;code&gt;AC_DEFINE&lt;/code&gt; produces:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/config.h.in b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;index 018bc95..61a2a67 100644&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;--- a/config.h.in&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -117,3 +117,6 @@&lt;/span&gt;
 /* Number of bits in a file offset, on hosts where this is settable. */
 #undef _FILE_OFFSET_BITS

&lt;span class=&quot;gi&quot;&gt;+/* Enable GNU extensions. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While &lt;code&gt;AC_GNU_SOURCE&lt;/code&gt; gives:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/config.h.in b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;index 018bc95..d7bed74 100644&lt;/span&gt;
&lt;span class=&quot;gd&quot;&gt;--- a/config.h.in&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/config.h.in&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -106,6 +106,23 @@&lt;/span&gt;
 /* -n option is available for cp and mv */
 #undef SUPPORT_NO_CLOBBER

&lt;span class=&quot;gi&quot;&gt;+/* Enable extensions on AIX 3, Interix.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _ALL_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _ALL_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable GNU extensions on systems that have them.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable threading extensions on Solaris.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _POSIX_PTHREAD_SEMANTICS&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _POSIX_PTHREAD_SEMANTICS&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable extensions on HP NonStop.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef _TANDEM_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef _TANDEM_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Enable general extensions on Solaris.  */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#ifndef __EXTENSIONS__&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+# undef __EXTENSIONS__&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#endif&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
 /* Version number of package */
 #undef VERSION

&lt;span class=&quot;gu&quot;&gt;@@ -123,5 +145,18 @@&lt;/span&gt;
 /* Define for large files, on AIX-style hosts. */
 #undef _LARGE_FILES

&lt;span class=&quot;gi&quot;&gt;+/* Define to 1 if on MINIX. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _MINIX&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Define to 2 if the system does not provide POSIX.1 features except with&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+   this defined. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _POSIX_1_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+/* Define to 1 if you need to in order for `stat&amp;#39; and other things to work. */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+#undef _POSIX_SOURCE&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Mon, 29 Jul 2013 00:00:00 +0300</pubDate>
				<link>/2013-07-29/autoconf-how-to-define-gnu-source</link>
				<guid isPermaLink="true">/2013-07-29/autoconf-how-to-define-gnu-source</guid>
			</item>
		
			<item>
				<title>Out-of-class overload of unary operators in C++</title>
				<description>&lt;p&gt;This may sound strange, but it seems that I have never thought about overloading
of unary operators in C++, which are not implemented as member functions.  It&amp;#39;s
not like it sounds strange or incorrect, I just never wanted to do it.  So, just
to be able to say &amp;quot;I did it at least once&amp;quot;, lets try it out on a very basic
example with overloading of postfix increment operator:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Overloaded!&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is easy to guess:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Overloaded!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it.  I don&amp;#39;t have anything more to say about it, because the idea of this
post is to fix the fact about this simple thing.&lt;/p&gt;
</description>
				<pubDate>Mon, 29 Apr 2013 00:00:00 +0300</pubDate>
				<link>/2013-04-29/cpp-out-of-class-unary-op-overload</link>
				<guid isPermaLink="true">/2013-04-29/cpp-out-of-class-unary-op-overload</guid>
			</item>
		
			<item>
				<title>Flattened aggregate initializers in C and C++</title>
				<description>&lt;p&gt;Today I found an interesting statement on one of forum pages of &lt;a href=&quot;http://www.linux.org.ru/forum/development/9110363&quot;&gt;LOR&lt;/a&gt;:
initializers of inner aggregates can be flattened.&lt;/p&gt;

&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstddef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;c[&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;i[&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;s[&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of a compiled example is easy to guess:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;c[0]: a
i[0]: 0
s[0]: A
c[1]: b
i[1]: 1
s[1]: B
c[2]: c
i[2]: 2
s[2]:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets remove inner curly braces in initialization of the &lt;code&gt;items&lt;/code&gt; array by
replacing&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It works the same way as the first example!  If you want the compiler to warn
you when such initialization takes place, pass &lt;code&gt;-Wall&lt;/code&gt; or &lt;code&gt;-Wmissing-braces&lt;/code&gt;
argument to gcc to get such warnings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;flattened.cpp:20:5: warning: missing braces around initializer for ‘const item’ [-Wmissing-braces]
flattened.cpp:20:5: warning: missing braces around initializer for ‘const item’ [-Wmissing-braces]
flattened.cpp:20:5: warning: missing braces around initializer for ‘const item’ [-Wmissing-braces]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most interesting part of this is that it&amp;#39;s not one of compiler&amp;#39;s extensions,
it&amp;#39;s a well documented behaviour.  Here is what &lt;a href=&quot;http://flash-gordon.me.uk/ansi.c.txt&quot;&gt;ANSI C&lt;/a&gt; standard says
about it (3.5.7 Initialization):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;If the initializer of a subaggregate or contained union begins with a left
brace, the initializers enclosed by that brace and its matching right
brace initialize the members of the subaggregate or the first member
of the contained union.  Otherwise, only enough initializers from the
list are taken to account for the members of the first subaggregate or
the first member of the contained union; any remaining initializers
are left to initialize the next member of the aggregate of which the
current subaggregate or contained union is a part.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is what draft &lt;a href=&quot;http://open-std.org/JTC1/SC22/WG21/docs/papers/2011/n3242.pdf&quot;&gt;#3242 of C++11 standard&lt;/a&gt; says (8.5.1/11):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;In a declaration of the form
    T x = { a };
braces can be elided in an initializer-list as follows.  If the
initializer-list begins with a left brace, then the succeeding
comma-separated list of initializer-clauses initializes the members of a
subaggregate; it is erroneous for there to be more initializer-clauses than
members.  If, however, the initializer-list for a sub-aggregate does not
begin with a left brace, then only enough initializer-clauses from the list
are taken to initialize the members of the subaggregate; any remaining
initializer-clauses are left to initialize the next member of the aggregate
of which the current subaggregate is a member.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But looks like this doesn&amp;#39;t work with unified curly brace initializers in C++11:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++ language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstddef&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;i[&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j[&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compiling of the example code above with &lt;code&gt;-std=c++11&lt;/code&gt; flag passed to gcc results
in:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;flattened-ctors.cpp: In function ‘int main()’:
flattened-ctors.cpp:25:5: error: could not convert ‘1’ from ‘int’ to ‘const item’
flattened-ctors.cpp:25:5: error: could not convert ‘2’ from ‘int’ to ‘const item’
flattened-ctors.cpp:25:5: error: could not convert ‘3’ from ‘int’ to ‘const item’
flattened-ctors.cpp:25:5: error: could not convert ‘4’ from ‘int’ to ‘const item’
flattened-ctors.cpp:25:5: error: could not convert ‘5’ from ‘int’ to ‘const item’
flattened-ctors.cpp:25:5: error: could not convert ‘6’ from ‘int’ to ‘const item’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Sun, 28 Apr 2013 00:00:00 +0300</pubDate>
				<link>/2013-04-28/cpp-aggregate-initializers</link>
				<guid isPermaLink="true">/2013-04-28/cpp-aggregate-initializers</guid>
			</item>
		
			<item>
				<title>How to set `xterm-256color` type of terminal in xterm on Slackware Linux?</title>
				<description>&lt;p&gt;Recently support for processing escape sequences in preview window was added to
vifm.  So I added highlighting of source code in my preview window using
&lt;a href=&quot;https://sourceforge.net/projects/syntaxhighlight&quot;&gt;highlight&lt;/a&gt; tool specifying &lt;code&gt;-O ansi&lt;/code&gt; to make it generate ansi compatible
escape codes.  But some of syntax group obtained the same color, because I had
my terminal configured to display up to 8 colors.  To solve the issue, I decided
to start using &lt;code&gt;xterm-256color&lt;/code&gt; terminal mode in xterm.  Here&amp;#39;s where all fun
began.&lt;/p&gt;

&lt;p&gt;I know that one can specify type of terminal with command like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xterm-256color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I could just put it to my &lt;code&gt;~/.profile&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt; file.  But that will
set type of terminal even for native terminal or when I login to maching using
ssh.  Those issues bother people and some of them solve the issue this way&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;$DISPLAY&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xterm-256color
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this is &lt;em&gt;not&lt;/em&gt; the way to go, because they write code in such place so that
it is executed every time, but does real work only in some cases.  The better
approach would to execute such code only for xterm.  But it doesn&amp;#39;t have any
configuration file, or does it?  Wait, there is &lt;code&gt;~/.Xdefaults&lt;/code&gt; file, when one
can set application-specific resources.  Lets do the right thing and read
documentation at first (&lt;code&gt;man xterm&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;-tn name
    This  option specifies the name of the terminal type to be set in the
    TERM environment variable.  It corresponds to the termName resource.
    This terminal type must exist in the terminal database (termcap or
    terminfo, depending on how  xterm  is  built) and should have li# and
    co# entries.  If the terminal type is not found, xterm uses the
    built-in list “xterm”, “vt102”, etc.

...

termName (class TermName)
    Specifies the terminal type name to be set in the TERM environment
    variable.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t want to supply an extra &lt;code&gt;-tn&lt;/code&gt; parameter to xterm everytime I use it, so
lets set &lt;code&gt;termName&lt;/code&gt; resource in the &lt;code&gt;~/.Xdefaults&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;XTerm*termName: xterm-256color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and apply the changes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;xrdb -merge ~/.Xdefaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run new instance of xterm and check:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tput colors
8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TERM&lt;/span&gt;
xterm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But why?  It works just fine when set from a running shell.  Check whether
appropriate terminfo configuration file exists:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l /usr/share/terminfo/x/xterm-256color
-rw-r--r-- 1 root root 2.3K Jun 26  2011 /usr/share/terminfo/x/xterm-256color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, lets try using &lt;code&gt;-tn&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# in old instance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xterm -tn xterm-256color
&lt;span class=&quot;c&quot;&gt;# in new instance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tput colors
8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TERM&lt;/span&gt;
xterm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What&amp;#39;s the ...  Try again:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# in old instance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xterm -tn xterm-color
&lt;span class=&quot;c&quot;&gt;# in new instance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tput colors
8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TERM&lt;/span&gt;
xterm-color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it works in general, it just doesn&amp;#39;t work for &lt;code&gt;xterm-256color&lt;/code&gt;.  OK, lets
reread the manual:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;EMULATIONS
   ...
   The “TERMCAP”  environment  variable is not set if xterm is linked
   against a terminfo library, since the requisite information is not
   provided by the termcap emulation of terminfo libraries.
   ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That seems strange, I saw this variable in a shell.  From &lt;code&gt;man termcap&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;/etc/termcap is an ASCII file (the database master) that lists the
capabilities of many different types of terminals.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s look for &lt;code&gt;xterm-color&lt;/code&gt; string in &lt;code&gt;/etc/termcap&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep -nA15 xterm-color /etc/termcap
144:vs|xterm|xterm-color|vs100|xterm terminal emulator &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X Window System&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
145-        :am:bs:mi@:km:co#80:li#55:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
146-        :im@:ei@:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
147-        :ct&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3k:ue&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;m:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
148-        :is&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;m&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?1l&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&amp;gt;:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
149-        :rs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;m&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?1l&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&amp;gt;:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
150-        :eA&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;0:as&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;^N:ae&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;^O:ac&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;aaffggjjkkllmmnnooqqssttuuvvwwxx:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
151-        :kI&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2~:kD&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;77:kP&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5~:kN&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6~:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
152-        :k1&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11~:k2&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;12~:k3&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;13~:k4&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14~:k5&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;15~:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
153-        :k6&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;17~:k7&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;18~:k8&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;19~:k9&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;20~:k0&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;21~:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
154-        :F1&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;23~:F2&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;24~:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
155-        :kh&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;H:kH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;Ow:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
156-        :ks&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:ke&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
157-        :te&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2J&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?47l&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;8:ti&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;7&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?47h:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
158-        :tc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vt-generic:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try modifying the first line by adding &lt;code&gt;xterm-256color&lt;/code&gt; to it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep -n xterm-color /etc/termcap
144:vs|xterm|xterm-color|xterm-256color|vs100|xterm terminal emulator &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X Window System&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# in old instance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xrdb -merge ~/.Xdefaults
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xterm
&lt;span class=&quot;c&quot;&gt;# in new instance&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tput colors
256
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TERM&lt;/span&gt;
xterm-256color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally...  I thought it would be way easier and faster than that (it took a
couple of hours).  The only question that&amp;#39;s left is: why xterm is compiled to
use termcap instead of terminfo on Slackware?&lt;/p&gt;
</description>
				<pubDate>Sun, 14 Apr 2013 00:00:00 +0300</pubDate>
				<link>/2013-04-14/howto-set-xterm-256color-term-in-slackware</link>
				<guid isPermaLink="true">/2013-04-14/howto-set-xterm-256color-term-in-slackware</guid>
			</item>
		
			<item>
				<title>How to operate on selection in mutt?</title>
				<description>&lt;p&gt;This is a very simple thing, but I just can&amp;#39;t make myself remember it. So here
is how it&amp;#39;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tag some of messages (e.g. by using &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;Alt-T&lt;/code&gt; and &lt;code&gt;Ctrl-T&lt;/code&gt; shortcuts)&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;;&lt;/code&gt; (which is bound to the &lt;code&gt;tag-prefix&lt;/code&gt; function by default) followed
by any other command you want to apply to the selected items.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically, that&amp;#39;s all I wanted to write.&lt;/p&gt;
</description>
				<pubDate>Sat, 30 Mar 2013 00:00:00 +0200</pubDate>
				<link>/2013-03-30/operate-on-selection-in-mutt</link>
				<guid isPermaLink="true">/2013-03-30/operate-on-selection-in-mutt</guid>
			</item>
		
			<item>
				<title>How to merge mailbox files of mbox format?</title>
				<description>&lt;p&gt;This sounds like an easy task at first.  But after looking on the Internet for a
working and ready to be used solution, it turned out to be not so easy to find.
There were some old scripts in python, but they didn&amp;#39;t look very promising to
me.  So after spending some time on search &lt;a href=&quot;http://does-not-exist.org/mail-archives/mutt-users/msg03132.html&quot;&gt;this answer to my question&lt;/a&gt; was
found.&lt;/p&gt;

&lt;p&gt;It requires the following steps to be taken for each set of files that need to
be merged:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Merge two (or more) files in mbox format into one file.&lt;/li&gt;
&lt;li&gt;Open resulting file in mutt.&lt;/li&gt;
&lt;li&gt;Remove all duplicated entries.&lt;/li&gt;
&lt;li&gt;Save mailbox file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step can be done with command like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;cat mbox2 &amp;gt;&amp;gt; mbox1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;cat mbox1 mbox2 &amp;gt; mbox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Personally I would recommend the second one, because it preserves original
files.  In case you would like to use the first one, don&amp;#39;t forget to &lt;strong&gt;make
backup copies&lt;/strong&gt; first.&lt;/p&gt;

&lt;p&gt;The second step requires properly setup mutt, which should be pointed out the
file you want to work with (you are using mutt for email, don&amp;#39;t you?).&lt;/p&gt;

&lt;p&gt;The third step is quite easy, you just need to open the mailbox and do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;:&lt;/code&gt; (colon) to enter command-line mode.&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;exec delete-pattern&lt;/code&gt; command and press &lt;code&gt;enter&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;Enter pattern &lt;code&gt;~=&lt;/code&gt;, which means all duplicated files and press &lt;code&gt;enter&lt;/code&gt; key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Or, if default &lt;code&gt;D&lt;/code&gt; mapping is left untouched, just:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;D&lt;/code&gt; key to activate &lt;code&gt;delete-pattern&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Enter pattern &lt;code&gt;~=&lt;/code&gt;, which means all duplicated files, and press &lt;code&gt;enter&lt;/code&gt; key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last step is probably will be performed by mutt automatically on exit.  Say
yes when and if you will be prompted about whether messages marked for the
deletion should be purged.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it.  At this point merge is completed.&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mutt user manual on &lt;code&gt;exec&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man muttrc&lt;/code&gt; on &lt;code&gt;~=&lt;/code&gt; and other patterns&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 30 Mar 2013 00:00:00 +0200</pubDate>
				<link>/2013-03-30/merge-mbox-mailboxes</link>
				<guid isPermaLink="true">/2013-03-30/merge-mbox-mailboxes</guid>
			</item>
		
			<item>
				<title>How to share code among several Web-service applications written in Java</title>
				<description>&lt;p&gt;Some time ago I&amp;#39;ve spent a lot of time trying to figure out how one can share
common parts of code in two Web-services running in &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Apache Tomcat&lt;/a&gt;.  What I
wanted is to move several packages to a separate Eclipse project and refer to it
from several other projects.  Somewhere on the Web a nice list of options to
achieve this was found.  All (or almost all) of them were connected with the
&lt;code&gt;Classpath&lt;/code&gt; settings pane in the project options.  But unfortunately no matter
what &lt;code&gt;Classpath&lt;/code&gt; options I set, it didn&amp;#39;t work.  I&amp;#39;ve also tried exporting
project with the common functionallity to a jar file and linking to it from
other project.  That didn&amp;#39;t work either, that jar file wasn&amp;#39;t deployed to Tomcat
server.&lt;/p&gt;

&lt;p&gt;So after spending a lot time on this, I finally made it work and forget about
the issue.  I just investigated what I did to make it work and decided to
document it.  The answer is simple as &amp;quot;just put jar file to the &lt;code&gt;lib&lt;/code&gt; directory
of Tomcat&amp;quot;.  And that&amp;#39;s it, don&amp;#39;t forget to regenerate it after making changes
in shared code.&lt;/p&gt;
</description>
				<pubDate>Fri, 09 Nov 2012 00:00:00 +0200</pubDate>
				<link>/2012-11-09/code-sharing-among-java-web-services</link>
				<guid isPermaLink="true">/2012-11-09/code-sharing-among-java-web-services</guid>
			</item>
		
			<item>
				<title>Double brace initializers in Java</title>
				<description>&lt;p&gt;Unfortunately, some features of well known programming languages are much less
known than others.  Eventually, those unknown features are quite powerful and
useful.  Today I&amp;#39;m going to describe so called &amp;quot;double brace initialization&amp;quot;
in Java, which is quite similar (and more powerful) than object initializers of
C#.&lt;/p&gt;

&lt;p&gt;I saw piece of code containing the following line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My initial guess was that author made a mistake and such code won&amp;#39;t compile.
But I was wrong since this code is completely valid Java code since about 2007.
To clear things a bit more I wrote this simple Java class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexInitializers&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ComplexInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Constructor&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ComplexInitializers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Initialization list&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ComplexInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which outputs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Constructor
Initialization list
a
b
c
class ComplexInitializers
class ComplexInitializers$1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets list several observations about the output:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Double brace initialization list is executed after constructor.&lt;/li&gt;
&lt;li&gt;We can also set variables and do what ever we want in context of the newly
created class instance.&lt;/li&gt;
&lt;li&gt;Java compiler creates an anonymous class, which contains code specified
inside double braces.&lt;/li&gt;
&lt;li&gt;Class of object created using double brace initialization differers of class
we are specifying in the source code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basing on the observations one can understand what Java compiler does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creates an anonymous subclass (outer curly brackets).&lt;/li&gt;
&lt;li&gt;Create an instance initialization block for the anonymous subclass (inner
curly brackets).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in fact there is nothing new (or magic) about this feature, it&amp;#39;s just a joint
usage of two other features of Java language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;anonymous subclasses&lt;/li&gt;
&lt;li&gt;instance initialization blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But when these features are used together, it gives us a qualitative change,
which can make code prettier in some use cases.&lt;/p&gt;

&lt;p&gt;Be aware about creating additional class for each double initialization block as
well as of some runtime overhead because of additional derived class in class
hierarchy.&lt;/p&gt;

&lt;p&gt;Also since we use subclassing, this won&amp;#39;t work with final classes.&lt;/p&gt;
</description>
				<pubDate>Thu, 18 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-18/java-double-brace-initializers</link>
				<guid isPermaLink="true">/2012-10-18/java-double-brace-initializers</guid>
			</item>
		
			<item>
				<title>strchr() finds zero character</title>
				<description>&lt;p&gt;As any other programmer once in a while I find some new tiny but quite useful
trick, which I then apply to my sources.  One of such trick is using of
&lt;code&gt;strchr()&lt;/code&gt; function to compare if a value of type &lt;code&gt;char&lt;/code&gt; equals to one of
values.&lt;/p&gt;

&lt;p&gt;Usually one will write something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With help of &lt;code&gt;strchr()&lt;/code&gt; one can the code with a bit simpler one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;abx&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which at least looks cleaner for me, which doesn&amp;#39;t matter much in this case, but
will matter in case of five of more comparison statements.&lt;/p&gt;

&lt;p&gt;So after replacing several comparisons in the code I was going to commit it.
But what a surprise: some of tests have failed (it&amp;#39;s always nice to have tests).
After standard procedure of staring at the code, I didn&amp;#39;t have any ideas of what
could go wrong, the logic should remain the same.  The next step was to run a
debugger, which has uncovered the truth: &lt;em&gt;the &lt;code&gt;strchr()&lt;/code&gt; function thinks that
ending &amp;#39;\0&amp;#39; character is a part of the string&lt;/em&gt;.  And it&amp;#39;s explicitly documented
by the standard (a good reason to read it till the end one day).  So instead of
comparing &lt;code&gt;c&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, the code bassically became like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which is wrong.  I&amp;#39;m still using &lt;code&gt;strchr()&lt;/code&gt; function when appropriate to do such
multiple comparisons, but now I know more about its behaviour (and also being
curious why it is so?).&lt;/p&gt;
</description>
				<pubDate>Wed, 17 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-17/strchr-finds-zero-char</link>
				<guid isPermaLink="true">/2012-10-17/strchr-finds-zero-char</guid>
			</item>
		
			<item>
				<title>Making ~/.inputrc work in slackware</title>
				<description>&lt;p&gt;Today I accidentally trapped on &lt;a href=&quot;https://wiki.archlinux.org/index.php/Bash#Faster_completion&quot;&gt;this part&lt;/a&gt; of Arch Linux wiki page on Bash.
And decided to try putting &lt;code&gt;set show-all-if-ambiguous On&lt;/code&gt; to my ~/.inputrc,
which was created for this.&lt;/p&gt;

&lt;p&gt;So I did it, but didn&amp;#39;t see any change in newly started instances of Bash.
Then I found a &lt;code&gt;C-X C-R&lt;/code&gt; mapping somewhere on StackOverflow and decided to try
loading my &lt;code&gt;~/.inputrc&lt;/code&gt; to running instance of Bash, but still had no luck.&lt;/p&gt;

&lt;p&gt;I also found &lt;code&gt;~/.inputrc_&lt;/code&gt; file, which was a result of my tries to make
&lt;code&gt;Arrow Up&lt;/code&gt; and &lt;code&gt;Arrow Down&lt;/code&gt; keys work like in Vim&amp;#39;s command line: recall only
commands that start with already typed command beginning:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;\e[A&amp;quot;: history-search-backward
&amp;quot;\e[B&amp;quot;: history-search-forward
&amp;quot;\eOA&amp;quot;: history-search-backward
&amp;quot;\eOB&amp;quot;: history-search-forward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time I was going to make it work, no matter what it takes :-)  So I did
the thing that should have been done long before: read &lt;code&gt;man readline&lt;/code&gt;.  Here&amp;#39;s
what I&amp;#39;ve found:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Readline is customized by putting commands in an initialization file
(the  inputrc  file).  The name of this file is taken from the value
of the INPUTRC environment variable.  If that variable is unset, the
default  is  ~/.inputrc.   If that file  does not exist or cannot be
read, the ultimate default is /etc/inputrc.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously, the next thing what to see if &lt;code&gt;$INPUTRC&lt;/code&gt; is defined:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INPUTRC&lt;/span&gt;
/etc/inputrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I didn&amp;#39;t set it!  Lets find out who did this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep -R &lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /etc 2&amp;gt;/dev/null
/etc/profile:  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/inputrc
/etc/zprofile:  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/inputrc
/etc/profile~:  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/inputrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the reason was found:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;11,14p&amp;#39;&lt;/span&gt; /etc/profile
&lt;span class=&quot;c&quot;&gt;# If the user doesn&amp;#39;t have a .inputrc, use the one in /etc.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -r &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.inputrc&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/inputrc
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lest make a conclusion.  If you logged in when there is no &lt;code&gt;~/.inputrc&lt;/code&gt; file,
you can try hard to make it work with no result.  It&amp;#39;s hard to say why someone
wants to have such behaviour.  Anyway, at least we know the reason now and can
fix it by login out and back in, by setting &lt;code&gt;$INPUTRC&lt;/code&gt; to &lt;code&gt;$HOME/.inputrc&lt;/code&gt; in
&lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.inputrc&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or by unsetting it there:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;INPUTRC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to test in immediately from the shell there are several options you
may try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unsetting &lt;code&gt;$INPUTRC&lt;/code&gt; and reloading init-file of readline by pressing
&lt;code&gt;C-X C-R&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This won&amp;#39;t work.  &lt;code&gt;C-X C-R&lt;/code&gt; actually reloads init-file, which was remembered
during initialization process.  So we need something different.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unsetting &lt;code&gt;$INPUTRC&lt;/code&gt; and running another Bash instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one should work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running Bash instance unsetting &lt;code&gt;$INPUTRC&lt;/code&gt; variable for that subprocess only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not sure if this is useful, but if it works why not give it a try?  This
requeres running of Bash using &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;env -u INPUTRC bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Empty &lt;code&gt;$INPUTRC&lt;/code&gt; is counted as nonexistend, so running Bash this way will work
too:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;This one is the last.  Almost the same as second and forth options:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;INPUTRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Sat, 13 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-13/making-inputrc-work-in-slackware</link>
				<guid isPermaLink="true">/2012-10-13/making-inputrc-work-in-slackware</guid>
			</item>
		
			<item>
				<title>Configuring keys in less</title>
				<description>&lt;p&gt;Since I&amp;#39;m using Vim and terminal constantly the only right way of going through
command-line history in my world is using &lt;code&gt;Control-P&lt;/code&gt; (&lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; or &lt;code&gt;^P&lt;/code&gt;; to go
backwards) and &lt;code&gt;Control-N&lt;/code&gt; (&lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; or &lt;code&gt;^N&lt;/code&gt; to go forwards).&lt;/p&gt;

&lt;p&gt;And I missed this key bindings while using less to view man pages or long output
of commands (e.g. &lt;code&gt;git log&lt;/code&gt;).  As always the first thing to do in such case
should be reading of man page of a tool.  Here is what I&amp;#39;ve found there:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Less has support of key bindings configuration file of binary format
(&lt;code&gt;~/.less&lt;/code&gt; by default)&lt;/li&gt;
&lt;li&gt;There is a special tool called &lt;code&gt;lesskey&lt;/code&gt;, which generates &lt;code&gt;~/.less&lt;/code&gt; binary
file from a text file (&lt;code&gt;~/.lesskey&lt;/code&gt; by default)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to know more about this stuff, just read &lt;code&gt;man less&lt;/code&gt; and
&lt;code&gt;man lesskey&lt;/code&gt;.  Below is an example of adding support of several shortcuts for
less.&lt;/p&gt;

&lt;p&gt;First of all one needs to create a file named &lt;code&gt;~/.lesskey&lt;/code&gt; (read &lt;code&gt;man lesskey&lt;/code&gt;
if you want to name it in another way) and put these lines in it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;#line-edit
\e abort
^P up
^N down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should already know that less has some kind of modality and thus it has
several modes.  No surprise that one needs to specify target mode for key
bingings, which is &lt;code&gt;#line-edit&lt;/code&gt; in the example above.  There should be no spaces
after sharp symbol.  Bellow that line tree more lines follow.  The first one
makes less leave line-edit mode if user presses &lt;code&gt;Escape&lt;/code&gt; key (&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;).  The
second one makes &lt;code&gt;Control-P&lt;/code&gt; work as &lt;code&gt;Arrow Up&lt;/code&gt; works by default, while the
third line binds &lt;code&gt;Control-N&lt;/code&gt; to &lt;code&gt;Arrow Down&lt;/code&gt; action.&lt;/p&gt;

&lt;p&gt;Here is where we need to use &lt;code&gt;lesskey&lt;/code&gt; tool.  Just run it and it will generate a
&lt;code&gt;~/.less&lt;/code&gt; file of binary format from the contents of &lt;code&gt;~/.lesskey&lt;/code&gt;.  Now try
running less for something, type &lt;code&gt;/&lt;/code&gt; (forward slash) to enter line-edit mode and
press &lt;code&gt;Control-N&lt;/code&gt; and &lt;code&gt;Control-P&lt;/code&gt; to check if it works, well it should work now.&lt;/p&gt;
</description>
				<pubDate>Thu, 11 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-11/configuring-keys-in-less</link>
				<guid isPermaLink="true">/2012-10-11/configuring-keys-in-less</guid>
			</item>
		
			<item>
				<title>How to connect a computer behind NAT to another computer behind NAT using ssh</title>
				<description>&lt;p&gt;I was wondering how can I connect to my laptop from work for some time, but
didn&amp;#39;t know how to do that without using VPN.  I even decided that it&amp;#39;s
impossible to do something simple, but then... I realized that a third party
server to which I have access through ssh can be used for this.&lt;/p&gt;

&lt;p&gt;The thing is that ssh can do port forwarding, which can be used to forward ssh
traffic through ssh tunnel.&lt;/p&gt;

&lt;p&gt;Consider having three machines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;machine &lt;code&gt;DST&lt;/code&gt;, a remote one, to which we want to connect&lt;/li&gt;
&lt;li&gt;machine &lt;code&gt;SRC&lt;/code&gt;, our local host, at which we&amp;#39;re working&lt;/li&gt;
&lt;li&gt;machive &lt;code&gt;SRV&lt;/code&gt;, which is a publicly accessible on the Internet ssh-enabled
web-server, and which has an account for you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to connect to the &lt;code&gt;DST&lt;/code&gt; machine from &lt;code&gt;SRC&lt;/code&gt; using &lt;code&gt;SRV&lt;/code&gt;.  Here is how one
can do that:&lt;/p&gt;

&lt;h3&gt;One port forwarding operation&lt;/h3&gt;

&lt;p&gt;The idea:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;sshd&lt;/code&gt; on &lt;code&gt;DST:port&lt;/code&gt; on &lt;code&gt;DST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Forward &lt;code&gt;DST:port&lt;/code&gt; to &lt;code&gt;SRV:port&lt;/code&gt; using ssh&lt;/li&gt;
&lt;li&gt;Connect to &lt;code&gt;SRV&lt;/code&gt; from &lt;code&gt;SRC&lt;/code&gt; using ssh&lt;/li&gt;
&lt;li&gt;Connect to &lt;code&gt;DST&lt;/code&gt; from ssh session to &lt;code&gt;SRV&lt;/code&gt; using &lt;code&gt;SRV:port&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets use same port number on both &lt;code&gt;DST&lt;/code&gt; and &lt;code&gt;SRV&lt;/code&gt; for simplicity, let it be
&lt;code&gt;4567&lt;/code&gt;, so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;DST:port = 4567
SRV:port = 4567
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets perform the algorithm step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step #1&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;root@DST# sshd -p 4567
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Step #2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;user@DST&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -R 127.1:4567:127.1:4567 user@SRV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should leave this session open, otherwise port mapping will be finished.
Also check for warning messages of ssh, there should be no
&lt;code&gt;remote port forwarding failed&lt;/code&gt; messages in the output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step #3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;user@SRC&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh user@SRV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Step #4&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;user@SRVi&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -p 4567 user@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Two port forwarding operation&lt;/h3&gt;

&lt;p&gt;Here the idea is a bit different at the end (from step number tree):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;sshd&lt;/code&gt; on &lt;code&gt;DST:port&lt;/code&gt; on &lt;code&gt;DST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Forward &lt;code&gt;DST:port&lt;/code&gt; to &lt;code&gt;SRV:port&lt;/code&gt; using ssh&lt;/li&gt;
&lt;li&gt;Forward &lt;code&gt;SRV:port&lt;/code&gt; to &lt;code&gt;SRC:port&lt;/code&gt; using ssh&lt;/li&gt;
&lt;li&gt;Connect to &lt;code&gt;SRC:port&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also need to use an additional port on our &lt;code&gt;SRC&lt;/code&gt; machine:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;SRV:port = 4567
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I won&amp;#39;t repeat first two steps as they are same as in
&amp;quot;One port forwarding operation&amp;quot; section.  Here are new third and forth steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step #3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;user@SRC&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -L 127.1:4567:127.1:4567 user@SRV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you should leave this session open, otherwise port mapping will be finished.
also check for warning messages of ssh, there should be no
&lt;code&gt;remote port forwarding failed&lt;/code&gt; messages in the output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step #4&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;user@SRC&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -p SRC:port user@SRC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you should be logged in on the &lt;code&gt;DST&lt;/code&gt;.  Mission completed!&lt;/p&gt;

&lt;p&gt;Update on 17.10.2012: it&amp;#39;s quite easy to accidentally close shell so here are a
couple of tips one can use to handle this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;stty eof &amp;#39;?&amp;#39;&lt;/code&gt;, which will disable exiting using &lt;code&gt;CTRL-D&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;CTRL-S&lt;/code&gt; key, which will suspend shell, so it won&amp;#39;t react until you use
&lt;code&gt;CTRL-Q&lt;/code&gt; to resume it.&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Wed, 10 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-10/bypass-two-nats-using-ssh</link>
				<guid isPermaLink="true">/2012-10-10/bypass-two-nats-using-ssh</guid>
			</item>
		
			<item>
				<title>An issue with colour prompt in bash</title>
				<description>&lt;h3&gt;Prehistory&lt;/h3&gt;

&lt;p&gt;Once I read somewhere that it&amp;#39;s possible to add some colours to your shell&amp;#39;s
(bash in my case) prompt using escape sequences.  I thought that it will
greatly decrease time one spend finding the beginning of a command that was just
run.  Prompt colouring is also useful to distinguish between root and regular
user prompt.  So after some experiments with &lt;code&gt;echo&lt;/code&gt; command, I added this line
to my &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# green command prompt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\033[32m[\\w]\\$ \033[0m&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this to &lt;code&gt;/root/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# red command prompt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\033[31m[\\w]\\$ \033[0m&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I liked it a lot, but after some time noticed strange issues with long command
lines.  I tried to live with it, but after quite long period of time removed
the colouring, since it made using long commands a hell.&lt;/p&gt;

&lt;h3&gt;Nowadays&lt;/h3&gt;

&lt;p&gt;All described above was a lot time ago, until suddenly I saw a link to
&lt;a href=&quot;http://tldp.org/HOWTO/Bash-Prompt-HOWTO/nonprintingchars.html&quot;&gt;this page&lt;/a&gt; in one of comments on &lt;a href=&quot;http://habrahabr.ru/&quot;&gt;HabraHabr&lt;/a&gt;.  And now I finally know
how to add colours to bash prompt not having that weird behaviour with long
command lines.  One just needs to enclose all non-printable characters in
&lt;code&gt;\[&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt;, so that bash wont count them as part of prompt string.  Now my
&lt;code&gt;.bashrc&lt;/code&gt; files contain this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# green command prompt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\\[\033[32m\\][\\w]\\$ \\[\033[0m\\]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this to &lt;code&gt;/root/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# red command prompt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\\[\033[31m\\][\\w]\\$ \\[\033[0m\\]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think no one will argue that this makes work in terminal a bit nicer.&lt;/p&gt;
</description>
				<pubDate>Tue, 09 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-09/bash-colour-prompt-issue</link>
				<guid isPermaLink="true">/2012-10-09/bash-colour-prompt-issue</guid>
			</item>
		
			<item>
				<title>Browsing directories using Vim's wildmenu</title>
				<description>&lt;p&gt;Today I accidentally found a very unexpected thing in Vim.  While trying to
make wildmenu disappear I hit some of arrow keys and great truth was uncovered
to me:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;one can browse file system in wildmenu using arrow keys!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They work like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;left arrow - go to left&lt;/li&gt;
&lt;li&gt;right arrow - go to right&lt;/li&gt;
&lt;li&gt;up arrow - enter directory&lt;/li&gt;
&lt;li&gt;down arrow - go to parent directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know its not a big deal, but it was really unexpected to me.  And in fact one
can find this in the documentation (see &lt;code&gt;:help &amp;#39;wildmenu&amp;#39;&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;Left&amp;gt; &amp;lt;Right&amp;gt;  - select previous/next match (like CTRL-P/CTRL-N)
&amp;lt;Down&amp;gt;          - in filename/menu name completion: move into a
                  subdirectory or submenu.
&amp;lt;CR&amp;gt;            - in menu completion, when the cursor is just after a
                  dot: move into a submenu.
&amp;lt;Up&amp;gt;            - in filename/menu name completion: move up into
                  parent directory or parent menu.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So do read the documentation!&lt;/p&gt;

&lt;p&gt;There is also a note:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim language-vim&quot; data-lang=&quot;vim&quot;&gt;This makes the menus accessible from the console &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;console&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;menus&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it may work with file system as a side effect of working for menus in the
console.&lt;/p&gt;
</description>
				<pubDate>Mon, 08 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-08/vim-wild-menu</link>
				<guid isPermaLink="true">/2012-10-08/vim-wild-menu</guid>
			</item>
		
			<item>
				<title>Enabling code highlighing in jekyll</title>
				<description>&lt;p&gt;It&amp;#39;s not hard to do, but not as easy as one might expect.  So here are the main
steps one need to follow to make code highlighing work:&lt;/p&gt;

&lt;h3&gt;1. Install &lt;code&gt;pygmentize&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In my case it was as easy as running the command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;sbopkg -i Pygments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test if it works one may try executing the following command found in
&lt;a href=&quot;http://doswa.com/2011/07/19/jekyll-syntax-highlighting-with-pygments-on-arch-linux.html&quot;&gt;this post&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;ruby -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;require &amp;#39;albino&amp;#39;; puts Albino.colorize(&amp;#39;puts \&amp;#39;Hello World\&amp;#39;&amp;#39;, :ruby)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output produced by the command should be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nb&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;puts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;#39;&lt;/span&gt;Hello World&lt;span class=&quot;ni&quot;&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. Define appropriate &lt;code&gt;.highlight&lt;/code&gt; styles to CSS file&lt;/h3&gt;

&lt;p&gt;As you code notice above, &lt;code&gt;pygmentize&lt;/code&gt; uses &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags to define syntax
elements using CSS classes.  So we need to generate a CSS style and include it
to our style file.  Such file can be easily generated by the &lt;code&gt;pygmentize&lt;/code&gt;
itself, with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;pygmentize -f html -S friendly &amp;gt; css/syntax.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In which &lt;code&gt;friendly&lt;/code&gt; is a name of style I choose.  You can list all available
styles by running the command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;pygmentize -L styles | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that I imported newly generated CSS file into my &lt;code&gt;css/style.css&lt;/code&gt; file
using the following directive:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That CSS file is linked in &lt;code&gt;_layouts/layout.html&lt;/code&gt; template by this line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/css/style.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. Enclose code in posts in &lt;code&gt;{% highlight lang %}&lt;/code&gt;/&lt;code&gt;{% endhighlight %}&lt;/code&gt; pseudo-tags&lt;/h3&gt;

&lt;p&gt;Now, when most things are set up one needs to tell jekyll which parts of posts
should be highlighted.  This is done by putting such parts between to
pseudo-tags, like in this code from a paragraph above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight html %}
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;/css/style.css&amp;quot; /&amp;gt;
{% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find out correct value for &lt;code&gt;lang&lt;/code&gt; argument of the &lt;code&gt;highlight&lt;/code&gt; tag from
the of output of the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;pygmentize -L lexers | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. Run jekyll with &lt;code&gt;--pygments&lt;/code&gt; flag&lt;/h3&gt;

&lt;p&gt;After finishing with previous steps I was almost sure it will work, but I get
only &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag prepended to my code blocks instead.  It turned out that the
very important thing is to start jekyll with &lt;code&gt;--pygments&lt;/code&gt; argument, like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll --server --pygments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this it all worked.&lt;/p&gt;
</description>
				<pubDate>Mon, 08 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-08/jekyll-highlight</link>
				<guid isPermaLink="true">/2012-10-08/jekyll-highlight</guid>
			</item>
		
			<item>
				<title>Exception specifiers and finally keyword in Java</title>
				<description>&lt;p&gt;Here is part of code I wrote once:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmiss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandFault&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After adding proper exception handling it becomes this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmiss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogicError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cmiss: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandFault&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogicError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cmiss: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point Eclipse start complaining about the &lt;code&gt;finally&lt;/code&gt; block saying that
&lt;code&gt;finally block does not complete normally&lt;/code&gt; and proposing
&lt;code&gt;Add suppressWarnings `finally` to execute()&lt;/code&gt; as the only possible solution.
While everything was working fine I didn&amp;#39;t care about what Eclipse says until
one day something went wrong, but code on layers above &lt;code&gt;execute()&lt;/code&gt; didn&amp;#39;t get
any exceptions.  This was something I didn&amp;#39;t expect at all, so I started the
debugger and saw that exception is throws as it should be, but then it gets
&amp;quot;swallowed&amp;quot; by the &lt;code&gt;finally&lt;/code&gt; block.  But wait, the method doesn&amp;#39;t have
exception list at all, java compiler silently compiles such code because it
knows that with &lt;code&gt;finally&lt;/code&gt; block containing &lt;code&gt;return&lt;/code&gt; statement in it, no
exception will be thrown.  Unfortunately I didn&amp;#39;t know that before.&lt;/p&gt;

&lt;p&gt;Now code looks like this and works as expected:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogicError&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmiss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogicError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cmiss: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandFault&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogicError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cmiss: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Mon, 08 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-08/java-exception</link>
				<guid isPermaLink="true">/2012-10-08/java-exception</guid>
			</item>
		
			<item>
				<title>gem install issue</title>
				<description>&lt;p&gt;This day I finally made a decision to start posting some notes on computer
related stuff and mainly about how I solved some minor issues with software.
Several month ago I already picked statically generated sites and GitHub pages
as a hosting (I don&amp;#39;t expect other people to read this, I just don&amp;#39;t want to
forget anything of it :-), so such hosting is enough for my needs).  So I found
a post &lt;a href=&quot;http://davidwinter.me/articles/2011/10/29/setting-up-github-pages/&quot;&gt;Setting up Github Pages&lt;/a&gt; written by David Winter and started
following steps described there.&lt;/p&gt;

&lt;p&gt;Unfortunately, I failed at the very first step with command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And got this error message from &lt;code&gt;gem&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;WARNING:  Error fetching data: Errno::ECONNREFUSED: Connection refused - connect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http://rubygems.org/latest_specs.4.8.gz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tried using &lt;code&gt;wget&lt;/code&gt; to download the file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://rubygems.org/latest_specs.4.8.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it worked greatly.  So the next thing to try was running some of &lt;code&gt;gem&lt;/code&gt;
commands that work locally:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;gem list --local
gem list -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which are worked fine, while these commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;gem list --remote
gem list -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;failed just like &lt;code&gt;gem install jekyll&lt;/code&gt;.  After searching on the Internet to find
out possible reason on an issue a note about possibly incorrect setup proxy was found (&lt;a href=&quot;http://osdir.com/ml/ruby-core/2010-06/msg00331.html&quot;&gt;here&lt;/a&gt;).  I
didn&amp;#39;t actually use any proxy, but since I was playing with &lt;a href=&quot;https://en.wikipedia.org/wiki/Privoxy&quot;&gt;privoxy&lt;/a&gt; some
time ago and remembered something about &lt;code&gt;$HTTP_PROXY&lt;/code&gt; environment variable I
decided to check contents of my &lt;code&gt;~/.bashrc&lt;/code&gt; and &lt;code&gt;~/.profile&lt;/code&gt; and found this line
in the &lt;code&gt;~/.profile&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HTTP_PROXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://127.0.0.1:8118&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t know why other software didn&amp;#39;t complain about not working proxy, it
seems like it just tried to use the proxy and then silently switched to direct
connection configuration.&lt;/p&gt;

&lt;p&gt;Anyway, after removing that line from the &lt;code&gt;~/.profile&lt;/code&gt; and running&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;HTTP_PROXY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;command in the working terminal I was able to successfully install &lt;code&gt;jekyll&lt;/code&gt; gem.&lt;/p&gt;
</description>
				<pubDate>Sun, 07 Oct 2012 00:00:00 +0300</pubDate>
				<link>/2012-10-07/gem-install-issue</link>
				<guid isPermaLink="true">/2012-10-07/gem-install-issue</guid>
			</item>
		
	</channel>
</rss>
